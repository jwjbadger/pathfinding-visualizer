{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","Algorithms/pathfinding/dijkstra.js","Algorithms/pathfinding/aStar.js","Algorithms/maze/randWeight.js","Algorithms/maze/randWall.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isStart","isFinish","isVisited","isWall","isWeight","onMouseDown","onMouseEnter","onMouseUp","extraClass","id","className","Component","updateUnvisitedNeighbors","currentNode","grid","finish","unvisitedNeighbors","getUnvisitedNeighbors","currentDistance","distance","neighbor","previousNode","neighbors","push","length","filter","sortNodes","nodeList","sort","nodeA","nodeB","getAllNodes","nodes","node","heuristic","Math","abs","weightDistance","randWeight","returnGrid","currentRow","random","randWall","PathfindingVisualizer","state","mouseIsPressed","holding","algorithm","create","start","getNewGrid","setState","newGrid","getGridWithSomething","updateStart","updateFinish","orderedNodes","nodesInPath","i","setTimeout","animatePath","document","getElementById","startNode","finishNode","unvisited","closestNode","shift","Infinity","aStar","dijkstra","unshift","getStarPath","getDijkstraPath","animateAlgorithm","window","location","reload","DropdownButton","title","variant","Dropdown","Item","eventKey","onClick","Button","visualizeAlgorithm","clearGrid","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","createNewNode","slice","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7b38e23.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isVisited,\r\n      isWall,\r\n      isWeight,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n    } = this.props;\r\n\r\n    // Huge sequence of ternary operators that adds tags\r\n    const extraClass = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isVisited\r\n      ? 'node-visited'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : isWeight\r\n      ? 'node-weight'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClass}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      />\r\n    );\r\n  }\r\n}\r\n","// This performs Dijkstra's algorithm WITHOUT finding the best\r\n// path, it simply finds the order of the nodes in which we\r\n// explored. Later, in the PathfindingVisualizer.jsx file, we\r\n// will find the path by backtracking through to least weighted\r\n// path.\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  // Goal return value of this function\r\n  const orderedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisited = getAllNodes(grid);\r\n\r\n  // !! gives the boolean value of a number (i.e. 0 = false, 1 = true)\r\n  while (!!unvisited.length) {\r\n    sortNodes(unvisited);\r\n    const closestNode = unvisited.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at distance infinity, that means we are stuck...\r\n    if (closestNode.distance === Infinity) return orderedNodes;\r\n\r\n    closestNode.isVisited = true;\r\n    // Here, we use push because the nodes need to be in order to animate properly and for other operations\r\n    orderedNodes.push(closestNode);\r\n\r\n    if (closestNode === finishNode) return orderedNodes;\r\n\r\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\r\n  }\r\n}\r\n\r\nconst updateUnvisitedNeighbors = (currentNode, grid, finish) => {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(currentNode, grid);\r\n  const currentDistance = currentNode.distance;\r\n\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (neighbor.isWeight) {\r\n      neighbor.distance = currentDistance + 12;\r\n    } else {\r\n      neighbor.distance = currentDistance + 1;\r\n    }\r\n    neighbor.previousNode = currentNode;\r\n  }\r\n};\r\n\r\nconst getUnvisitedNeighbors = (currentNode, grid) => {\r\n  const neighbors = [];\r\n  const { row, col } = currentNode;\r\n\r\n  // Get everything on the bottom of this node (if there is anything)\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  // Get everything on the top of this node (if there is anything)\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  // Get everything on the left of this node (if there is anything)\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  // Get everything on the right of this node (if there is anything)\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  // Only return the unvisited nodes\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n};\r\n\r\nconst sortNodes = (nodeList) =>\r\n  nodeList.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n\r\nconst getAllNodes = (grid) => {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n};\r\n\r\n// Function that backtracks AFTER the dijkstra main function\r\n// has been called. This will get the shortest path.\r\nexport const getDijkstraPath = (finishNode) => {\r\n  const nodesInPath = [];\r\n  let currentNode = finishNode;\r\n\r\n  while (currentNode) {\r\n    nodesInPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n\r\n  return nodesInPath;\r\n};\r\n","// This performs the A* algorithm WITHOUT finding the best\r\n// path, it simply finds the order of the nodes in which we\r\n// explored. Later, in the PathfindingVisualizer.jsx file, we\r\n// will find the path by backtracking through to least weighted\r\n// path (using a function defined here). Note that this is just\r\n// copied dijkstra.js, with a few addons.\r\n\r\nexport function aStar(grid, startNode, finishNode) {\r\n  // Goal return value of this function\r\n  const orderedNodes = [];\r\n  startNode.distance = 0;\r\n  startNode.weightDistance = 0;\r\n  const unvisited = getAllNodes(grid);\r\n\r\n  // !! gives the boolean value of a number (i.e. 0 = false, 1 = true)\r\n  while (!!unvisited.length) {\r\n    sortNodes(unvisited);\r\n    const closestNode = unvisited.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at distance infinity, that means we are stuck...\r\n    if (closestNode.distance === Infinity) return orderedNodes;\r\n\r\n    closestNode.isVisited = true;\r\n    // Here, we use push because the nodes need to be in order to animate properly and for other operations\r\n    orderedNodes.push(closestNode);\r\n\r\n    if (closestNode === finishNode) return orderedNodes;\r\n\r\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\r\n  }\r\n}\r\n\r\nconst heuristic = (node, finish) => {\r\n  return Math.abs(node.row - finish.row) + Math.abs(node.col - finish.col);\r\n};\r\n\r\nconst updateUnvisitedNeighbors = (currentNode, grid, finish) => {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(currentNode, grid);\r\n  const currentDistance = currentNode.distance;\r\n\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (neighbor.isWeight) {\r\n      neighbor.distance = currentDistance + 12;\r\n    } else {\r\n      neighbor.distance = currentDistance + 1;\r\n    }\r\n\r\n    // Change their weight distance to reflect whether they are or aren't in the direction of the finish node\r\n    neighbor.weightDistance = heuristic(neighbor, finish) + neighbor.distance;\r\n    neighbor.previousNode = currentNode;\r\n  }\r\n};\r\n\r\nconst getUnvisitedNeighbors = (currentNode, grid) => {\r\n  const neighbors = [];\r\n  const { row, col } = currentNode;\r\n\r\n  // Get everything on the bottom of this node (if there is anything)\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  // Get everything on the top of this node (if there is anything)\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  // Get everything on the left of this node (if there is anything)\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  // Get everything on the right of this node (if there is anything)\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  // Only return the unvisited nodes\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n};\r\n\r\nconst sortNodes = (nodeList) =>\r\n  nodeList.sort((nodeA, nodeB) => nodeA.weightDistance - nodeB.weightDistance);\r\n\r\nconst getAllNodes = (grid) => {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n};\r\n\r\n// Function that backtracks AFTER the dijkstra main function\r\n// has been called. This will get the shortest path.\r\nexport const getStarPath = (finishNode) => {\r\n  const nodesInPath = [];\r\n  let currentNode = finishNode;\r\n\r\n  while (currentNode) {\r\n    nodesInPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n\r\n  return nodesInPath;\r\n};\r\n","export function randWeight(grid) {\r\n  const returnGrid = grid;\r\n\r\n  for (let row = 0; row < grid.length; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < grid[0].length; col++) {\r\n      const node = returnGrid[row][col];\r\n\r\n      if (node.isFinish || node.isStart || node.isWall) {\r\n        currentRow.push(node);\r\n        continue;\r\n      }\r\n\r\n      node.isWeight = Math.random() >= 0.7;\r\n      currentRow.push(node);\r\n    }\r\n    returnGrid[row] = currentRow;\r\n  }\r\n  return returnGrid;\r\n}\r\n","export function randWall(grid) {\r\n  const returnGrid = grid;\r\n\r\n  for (let row = 0; row < grid.length; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < grid[0].length; col++) {\r\n      const node = returnGrid[row][col];\r\n\r\n      if (node.isFinish || node.isStart || node.isWeight) {\r\n        currentRow.push(node);\r\n        continue;\r\n      }\r\n\r\n      node.isWall = Math.random() >= 0.7;\r\n      currentRow.push(node);\r\n    }\r\n    returnGrid[row] = currentRow;\r\n  }\r\n  return returnGrid;\r\n}\r\n","import React, { Component } from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport { dijkstra, getDijkstraPath } from '../Algorithms/pathfinding/dijkstra';\r\nimport { aStar, getStarPath } from '../Algorithms/pathfinding/aStar';\r\n\r\nimport { randWeight } from '../Algorithms/maze/randWeight';\r\nimport { randWall } from '../Algorithms/maze/randWall';\r\n\r\nimport { Button, Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_ROW = 10;\r\nconst START_COLUMN = 5;\r\nconst FINISH_ROW = 5;\r\nconst FINISH_COLUMN = 40;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      holding: '',\r\n      algorithm: 'dijkstra',\r\n      create: 'walls',\r\n      start: [START_ROW, START_COLUMN],\r\n      finish: [FINISH_ROW, FINISH_COLUMN],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getNewGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const { grid, create } = this.state;\r\n    if (grid[row][col].isStart) {\r\n      this.setState({ holding: 'start', mouseIsPressed: true });\r\n    } else if (grid[row][col].isFinish) {\r\n      this.setState({ holding: 'finish', mouseIsPressed: true });\r\n    } else {\r\n      const newGrid = getGridWithSomething(grid, create, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const { grid, holding, create } = this.state;\r\n    if (holding === 'start') {\r\n      const newGrid = updateStart(grid, row, col, this.state.start);\r\n      if (newGrid) this.setState({ grid: newGrid, start: [row, col] });\r\n    } else if (holding === 'finish') {\r\n      const newGrid = updateFinish(grid, row, col, this.state.finish);\r\n      if (newGrid) this.setState({ grid: newGrid, finish: [row, col] });\r\n    } else {\r\n      const newGrid = getGridWithSomething(grid, create, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({\r\n      mouseIsPressed: false,\r\n      holding: '',\r\n    });\r\n  }\r\n\r\n  animateAlgorithm(orderedNodes, nodesInPath) {\r\n    for (let i = 0; i <= orderedNodes.length; i++) {\r\n      if (i === orderedNodes.length) {\r\n        setTimeout(() => {\r\n          this.animatePath(nodesInPath);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        const node = orderedNodes[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className +=\r\n          ' node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animatePath(nodesInPath) {\r\n    for (let i = 0; i < nodesInPath.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInPath[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className +=\r\n          ' node-path';\r\n      }, 50 * i);\r\n    }\r\n    return;\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    const { grid, start, finish, algorithm } = this.state;\r\n\r\n    const startNode = grid[start[0]][start[1]];\r\n    const finishNode = grid[finish[0]][finish[1]];\r\n\r\n    const orderedNodes =\r\n      algorithm === 'aStar'\r\n        ? aStar(grid, startNode, finishNode)\r\n        : dijkstra(grid, startNode, finishNode);\r\n    const nodesInPath =\r\n      algorithm === 'aStar'\r\n        ? getStarPath(finishNode)\r\n        : getDijkstraPath(finishNode);\r\n\r\n    this.animateAlgorithm(orderedNodes, nodesInPath);\r\n  }\r\n\r\n  clearGrid() {\r\n    window.location.reload(false);\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='header'>\r\n          <DropdownButton title='Algorithm' variant='info' id='buttons'>\r\n            <Dropdown.Item\r\n              eventKey='1'\r\n              onClick={() => {\r\n                this.setState({ algorithm: 'dijkstra' });\r\n              }}>\r\n              Dijkstra's\r\n            </Dropdown.Item>\r\n            <Dropdown.Item\r\n              eventKey='2'\r\n              onClick={() => {\r\n                this.setState({ algorithm: 'aStar' });\r\n              }}>\r\n              A*\r\n            </Dropdown.Item>\r\n          </DropdownButton>\r\n          <DropdownButton title='Creation Selector' variant='info' id='buttons'>\r\n            <Dropdown.Item\r\n              eventKey='1'\r\n              onClick={() => {\r\n                this.setState({ create: 'walls' });\r\n              }}>\r\n              Walls\r\n            </Dropdown.Item>\r\n            <Dropdown.Item\r\n              eventKey='2'\r\n              onClick={() => {\r\n                this.setState({ create: 'weights' });\r\n              }}>\r\n              Weights\r\n            </Dropdown.Item>\r\n          </DropdownButton>\r\n          <DropdownButton title='Generate Maze' variant='info' id='buttons'>\r\n            <Dropdown.Item\r\n              eventKey='1'\r\n              onClick={() => {\r\n                this.setState({ grid: randWeight(this.state.grid) });\r\n              }}>\r\n              Random Weight\r\n            </Dropdown.Item>\r\n            <Dropdown.Item\r\n              eventKey='2'\r\n              onClick={() => {\r\n                this.setState({ grid: randWall(this.state.grid) });\r\n              }}>\r\n              Random Wall\r\n            </Dropdown.Item>\r\n          </DropdownButton>\r\n          <Button\r\n            variant='info'\r\n            id='buttons'\r\n            onClick={() => this.visualizeAlgorithm()}>\r\n            Visualize\r\n          </Button>\r\n          <Button variant='info' id='buttons' onClick={() => this.clearGrid()}>\r\n            Clear\r\n          </Button>\r\n        </div>\r\n        <div className='grid'>\r\n          {/* Iterate over each row in the grid */}\r\n          {grid.map((row, rowIdx) => {\r\n            // Return each row, with nodes created\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isFinish,\r\n                    isStart,\r\n                    isVisited,\r\n                    isWall,\r\n                    isWeight,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isVisited={isVisited}\r\n                      isWall={isWall}\r\n                      isWeight={isWeight}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      key={nodeIdx}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst createNewNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === START_ROW && col === START_COLUMN,\r\n    isFinish: row === FINISH_ROW && col === FINISH_COLUMN,\r\n    isVisited: false,\r\n    distance: Infinity,\r\n    weightDistance: Infinity,\r\n    isWall: false,\r\n    isWeight: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGrid = () => {\r\n  const grid = [];\r\n\r\n  // Iterate over each row and column, and add each full row to grid\r\n  for (let row = 0; row < 15; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNewNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst getGridWithSomething = (grid, create, row, col) => {\r\n  const newGrid = grid.slice();\r\n\r\n  if (create === 'walls' && !newGrid[row][col].isWeight) {\r\n    newGrid[row][col].isWall = !newGrid[row][col].isWall;\r\n  } else if (create === 'weights' && !newGrid[row][col].isWall) {\r\n    newGrid[row][col].isWeight = !newGrid[row][col].isWeight;\r\n  }\r\n\r\n  return newGrid;\r\n};\r\n\r\nconst updateStart = (grid, row, col, start) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (node.isFinish || node.isWall) return;\r\n\r\n  node.isStart = true;\r\n  newGrid[start[0]][start[1]].isStart = false;\r\n\r\n  return newGrid;\r\n};\r\n\r\nconst updateFinish = (grid, row, col, finish) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (node.isStart || node.isWall) return;\r\n\r\n  node.isFinish = true;\r\n  newGrid[finish[0]][finish[1]].isFinish = false;\r\n\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <PathfindingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}